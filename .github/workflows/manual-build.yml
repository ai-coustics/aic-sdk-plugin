name: Manual Build

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: "Build type"
        required: true
        default: "Release"
        type: choice
        options:
          - Release
          - Debug
          - RelWithDebInfo
      platforms:
        description: "Platforms to build"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - linux
          - macos
          - windows
      create_installers:
        description: "Create installer packages"
        required: true
        default: true
        type: boolean

env:
  CMAKE_BUILD_TYPE: ${{ github.event.inputs.build_type }}
  JUCE_BUILD_PARALLEL_JOBS: 4

jobs:
  build-linux:
    runs-on: ubuntu-22.04
    if: ${{ github.event.inputs.platforms == 'all' || github.event.inputs.platforms == 'linux' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev \
            libjack-jackd2-dev \
            ladspa-sdk \
            libcurl4-openssl-dev \
            libfreetype6-dev \
            libx11-dev \
            libxcomposite-dev \
            libxcursor-dev \
            libxcursor-dev \
            libxext-dev \
            libxinerama-dev \
            libxrandr-dev \
            libxrender-dev \
            libwebkit2gtk-4.0-dev \
            libglu1-mesa-dev \
            mesa-common-dev

      - name: Configure CMake
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
            -DCMAKE_INSTALL_PREFIX=/usr/local

      - name: Build plugin
        run: cmake --build build --config ${{ env.CMAKE_BUILD_TYPE }} -j ${{ env.JUCE_BUILD_PARALLEL_JOBS }}

      - name: List build artifacts
        run: |
          echo "Build artifacts:"
          find build -name "*.vst3" -o -name "*.component" -o -name "*.app" | head -20

      - name: Prepare Linux release package
        if: ${{ github.event.inputs.create_installers == 'true' }}
        run: |
          mkdir -p release-package/linux
          cp -r build/AicSdkPlugin_artefacts/${{ env.CMAKE_BUILD_TYPE }}/VST3 release-package/linux/
          cp release/linux/install.sh release-package/linux/
          chmod +x release-package/linux/install.sh

      - name: Create Linux archive
        if: ${{ github.event.inputs.create_installers == 'true' }}
        run: |
          cd release-package
          tar -czf ../ai-coustics-demo-plugin-linux-${{ env.CMAKE_BUILD_TYPE }}.tar.gz linux/

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-build-${{ env.CMAKE_BUILD_TYPE }}
          path: |
            build/AicSdkPlugin_artefacts/${{ env.CMAKE_BUILD_TYPE }}/
            ai-coustics-demo-plugin-linux-${{ env.CMAKE_BUILD_TYPE }}.tar.gz
          retention-days: 7

  build-macos:
    runs-on: macos-13
    if: ${{ github.event.inputs.platforms == 'all' || github.event.inputs.platforms == 'macos' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure CMake
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=10.11 \
            -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"

      - name: Build plugin
        run: cmake --build build --config ${{ env.CMAKE_BUILD_TYPE }} -j ${{ env.JUCE_BUILD_PARALLEL_JOBS }}

      - name: List build artifacts
        run: |
          echo "Build artifacts:"
          find build -name "*.vst3" -o -name "*.component" -o -name "*.app" | head -20

      - name: Prepare macOS release package
        if: ${{ github.event.inputs.create_installers == 'true' }}
        run: |
          mkdir -p release-package/macos
          cp -r build/AicSdkPlugin_artefacts/${{ env.CMAKE_BUILD_TYPE }}/VST3 release-package/macos/
          cp -r build/AicSdkPlugin_artefacts/${{ env.CMAKE_BUILD_TYPE }}/AU release-package/macos/
          cp -r build/AicSdkPlugin_artefacts/${{ env.CMAKE_BUILD_TYPE }}/Standalone release-package/macos/

          # Copy installer scripts
          cp release/macos/*.sh release-package/macos/
          cp release/macos/*.command release-package/macos/
          cp release/macos/README_INSTALLER.md release-package/macos/

          # Make scripts executable
          chmod +x release-package/macos/*.sh
          chmod +x release-package/macos/*.command

      - name: Create macOS app installer
        if: ${{ github.event.inputs.create_installers == 'true' }}
        run: |
          cd release-package/macos
          ./create_app_installer.sh

      - name: Create macOS archive
        if: ${{ github.event.inputs.create_installers == 'true' }}
        run: |
          cd release-package
          tar -czf ../ai-coustics-demo-plugin-macos-${{ env.CMAKE_BUILD_TYPE }}.tar.gz macos/

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-build-${{ env.CMAKE_BUILD_TYPE }}
          path: |
            build/AicSdkPlugin_artefacts/${{ env.CMAKE_BUILD_TYPE }}/
            ai-coustics-demo-plugin-macos-${{ env.CMAKE_BUILD_TYPE }}.tar.gz
          retention-days: 7

  build-windows:
    runs-on: windows-2022
    if: ${{ github.event.inputs.platforms == 'all' || github.event.inputs.platforms == 'windows' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure CMake
        run: |
          cmake -B build -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }}

      - name: Build plugin
        run: cmake --build build --config ${{ env.CMAKE_BUILD_TYPE }} -j ${{ env.JUCE_BUILD_PARALLEL_JOBS }}

      - name: List build artifacts
        run: |
          Write-Host "Build artifacts:"
          Get-ChildItem -Recurse -Path build -Include "*.vst3", "*.component", "*.exe" | Select-Object -First 20 | Format-Table Name, FullName

      - name: Prepare Windows release package
        if: ${{ github.event.inputs.create_installers == 'true' }}
        run: |
          New-Item -ItemType Directory -Force -Path "release-package\windows"
          Copy-Item -Recurse -Force "build\AicSdkPlugin_artefacts\${{ env.CMAKE_BUILD_TYPE }}\VST3" "release-package\windows\"
          Copy-Item -Force "release\windows\*.ps1" "release-package\windows\"
          Copy-Item -Force "release\windows\*.bat" "release-package\windows\"
          Copy-Item -Force "release\windows\README_INSTALLER.md" "release-package\windows\"

      - name: Install PS2EXE and create Windows executable installer
        if: ${{ github.event.inputs.create_installers == 'true' }}
        run: |
          Install-Module -Name ps2exe -Force -AllowClobber
          cd release-package\windows
          .\create_exe_installer.ps1

      - name: Create Windows archive
        if: ${{ github.event.inputs.create_installers == 'true' }}
        run: |
          cd release-package
          Compress-Archive -Path "windows" -DestinationPath "..\ai-coustics-demo-plugin-windows-${{ env.CMAKE_BUILD_TYPE }}.zip" -Force

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-${{ env.CMAKE_BUILD_TYPE }}
          path: |
            build/AicSdkPlugin_artefacts/${{ env.CMAKE_BUILD_TYPE }}/
            ai-coustics-demo-plugin-windows-${{ env.CMAKE_BUILD_TYPE }}.zip
          retention-days: 7

  build-summary:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Type:** ${{ github.event.inputs.build_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** ${{ github.event.inputs.platforms }}" >> $GITHUB_STEP_SUMMARY
          echo "**Create Installers:** ${{ github.event.inputs.create_installers }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-linux.result }}" != "skipped" ]; then
            echo "- **Linux Build:** ${{ needs.build-linux.result }}" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.build-macos.result }}" != "skipped" ]; then
            echo "- **macOS Build:** ${{ needs.build-macos.result }}" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.build-windows.result }}" != "skipped" ]; then
            echo "- **Windows Build:** ${{ needs.build-windows.result }}" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Build artifacts are available for download from the workflow run page." >> $GITHUB_STEP_SUMMARY
